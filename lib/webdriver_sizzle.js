// Generated by CoffeeScript 1.7.1
var fs, path;

path = require('path');

fs = require('fs');


/*
@param driver - a built driver instance
@param selenium - the selenium module.
very important that these are using the same code/version,
b/c of the library's global control flow.
 */

module.exports = function(driver, selenium) {
  var Deferred, WebElement, checkSizzleExists, injectSizzle, one;
  if (selenium == null) {
    selenium = require('selenium-webdriver');
  }
  if (!(driver instanceof selenium.WebDriver)) {
    throw new Error("Driver passed to webdriver-sizzle must be a WebDriver instance.");
  }
  Deferred = selenium.promise.Deferred;
  WebElement = selenium.WebElement;
  checkSizzleExists = function() {
    return driver.executeScript(function() {
      return window.Sizzle != null;
    });
  };
  injectSizzle = function() {
    var sizzleCode;
    sizzleCode = fs.readFileSync(path.join(__dirname, '../lib', 'sizzle.min.js'));
    return driver.executeScript("var module = {exports: {}};\n" + sizzleCode + "\nwindow.Sizzle = module.exports;");
  };
  one = function(selector) {
    var d;
    d = new Deferred;
    checkSizzleExists().then(function(sizzleExists) {
      if (!sizzleExists) {
        return injectSizzle();
      }
    }).then(function() {
      var elementPromise;
      elementPromise = driver.findElement(selenium.By.js(function(selector) {
        return (window.Sizzle(selector) || [])[0];
      }, selector));
      return d.fulfill(elementPromise);
    }).thenCatch(function(err) {
      throw new Error("Selector " + selector + " matches nothing");
    });
    return new WebElement(driver, d.promise);
  };
  one.all = function(selector) {
    return checkSizzleExists().then(function(sizzleExists) {
      if (!sizzleExists) {
        return injectSizzle();
      }
    }).then(function() {
      var elementPromise;
      return elementPromise = driver.findElements(selenium.By.js(function(selector) {
        return window.Sizzle(selector) || [];
      }, selector));
    });
  };
  return one;
};
